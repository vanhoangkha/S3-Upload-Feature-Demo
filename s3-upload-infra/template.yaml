AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FCJ DMS - Unified SAM Template

Parameters:
  DocumentStoreBucketName:
    Type: String
    Default: vibdmsstore2026
  WebStoreBucketName:
    Type: String
    Default: vibdmswebstore2026
  AmplifyAppDomain:
    Type: String
    Default: https://dev.d3gk57lhevbrz2.amplifyapp.com

# --- Auth Resources ---
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: vibdms-app-2026-userpool
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: vibdms-app-2026-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: vibdms-app-2026-identitypool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # IAM Roles for Cognito Identity Pool
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: s3-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${DocumentStoreBucketName}
                  - !Sub arn:aws:s3:::${DocumentStoreBucketName}/*

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: s3-read-only-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${WebStoreBucketName}
                  - !Sub arn:aws:s3:::${WebStoreBucketName}/*

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

# --- Storage Resources ---
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DocumentStoreBucketName
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD, PUT, POST, DELETE]
            AllowedOrigins: [!Ref AmplifyAppDomain]
            ExposedHeaders: [ETag]
            MaxAge: 3000

  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebStoreBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD, PUT, POST, DELETE]
            AllowedOrigins: [!Ref AmplifyAppDomain]
            ExposedHeaders: [ETag]
            MaxAge: 3000

  DocsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Documents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: file
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: file
          KeyType: RANGE

  GeneralTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: General
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

# --- API & Lambda Functions ---
  DocsList:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/list_docs/
      Handler: list_docs.lambda_handler
      Runtime: python3.9
      FunctionName: list_docs
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DocsTable
      Environment:
        Variables:
          TABLE_NAME: !Ref DocsTable
      Events:
        ListDocs:
          Type: Api
          Properties:
            Path: /docs/{id}
            Method: get
            RestApiId: !Ref Api

  DocsUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/upload_doc/
      Handler: upload_doc.lambda_handler
      Runtime: python3.9
      FunctionName: upload_doc
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DocsTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentBucket
      Environment:
        Variables:
          TABLE_NAME: !Ref DocsTable
          BUCKET_NAME: !Ref DocumentBucket
      Events:
        UploadDocs:
          Type: Api
          Properties:
            Path: /docs
            Method: post
            RestApiId: !Ref Api

  DocsDelete:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/delete_doc/
      Handler: delete_doc.lambda_handler
      Runtime: python3.9
      FunctionName: delete_doc
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocsTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentBucket
      Environment:
        Variables:
          TABLE_NAME: !Ref DocsTable
          BUCKET_NAME: !Ref DocumentBucket
      Events:
        DeleteDoc:
          Type: Api
          Properties:
            Path: /docs/{id}
            Method: delete
            RestApiId: !Ref Api

  GeneralInforUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/upload_general_infor/
      Handler: upload_general_infor.lambda_handler
      Runtime: python3.9
      FunctionName: upload_general_infor
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref GeneralTable
      Environment:
        Variables:
          TABLE_NAME: !Ref GeneralTable
      Events:
        UploadGeneral:
          Type: Api
          Properties:
            Path: /docs/{id}/gen
            Method: post
            RestApiId: !Ref Api

  GeneralInforGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get_general_infor/
      Handler: get_general_infor.lambda_handler
      Runtime: python3.9
      FunctionName: get_general_infor
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GeneralTable
      Environment:
        Variables:
          TABLE_NAME: !Ref GeneralTable
      Events:
        GetGeneral:
          Type: Api
          Properties:
            Path: /docs/{id}/gen
            Method: get
            RestApiId: !Ref Api

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Ref AmplifyAppDomain
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev"
  WebBucket:
    Description: "Web S3 Bucket"
    Value: !Ref WebBucket
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
