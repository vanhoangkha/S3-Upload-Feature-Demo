name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: 20

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install API dependencies
        run: |
          cd api
          npm ci

      - name: Run API tests
        run: |
          cd api
          npm test

      - name: Install Web dependencies
        run: |
          cd web
          npm ci

      - name: Run Web tests
        run: |
          cd web
          npm test

      - name: Lint API code
        run: |
          cd api
          npm run lint

      - name: Lint Web code
        run: |
          cd web
          npm run lint

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd api && npm ci
          cd ../web && npm ci

      - name: Run security audit
        run: |
          cd api && npm audit --audit-level=high
          cd ../web && npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Build API
        run: |
          cd api
          npm ci
          npm run build

      - name: Build Web
        run: |
          cd web
          npm ci
          npm run build

      - name: Upload API build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: api/dist/

      - name: Upload Web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web/dist/

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy infrastructure
        run: |
          cd infra/envs/dev
          terraform init
          terraform plan -var="env=dev"
          terraform apply -var="env=dev" -auto-approve

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: api/dist/

      - name: Deploy API
        run: |
          cd api
          npm ci --only=production
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh dev

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web/dist/

      - name: Deploy Web
        run: |
          cd web
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh dev

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy infrastructure
        run: |
          cd infra/envs/stg
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Deploy API
        run: |
          cd api
          npm ci --only=production
          ./scripts/deploy.sh stg

      - name: Deploy Web
        run: |
          cd web
          ./scripts/deploy.sh stg

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy infrastructure
        run: |
          cd infra/envs/prod
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Deploy API
        run: |
          cd api
          npm ci --only=production
          ./scripts/deploy.sh prod

      - name: Deploy Web
        run: |
          cd web
          ./scripts/deploy.sh prod

      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running production smoke tests..."
          # curl -f https://api.example.com/v1/health

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
